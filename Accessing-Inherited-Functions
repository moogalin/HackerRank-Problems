
// The following code was provided by HackerRank (user: vatsalchanana)

#include <iostream>
using namespace std;

int callA = 0;
int callB = 0;
int callC = 0;

class A {
protected:
  void fun(int & a) {
    a = a*2;
    callA++;
  }
};

class B {
protected:
  void func(int & a) {
    a = a*3;
    callB++;
  }
  
class C {
protected:
  void func(int & a) {
    a = a*5;
    callC++;
  }
};

class D {
  int val;
  public:
    //Initially val is 1
    D() {
      val = 1;
    }
    
    /* Problem to solve: You need to modify the class D and implement the function update_val 
     * which sets D's val to new_val by manipulating the value by only calling the func 
     * defined in classes A, B and C.
     */
     
     void update_val(int new_val) {
           while (new_val%2 == 0 ) {
                A::func(val);
                new_val /= 2;
            }
             
            while (new_val%3 == 0 ) {
                B::func(val);
                new_val /= 3;
            }
          
            while (new_val%5 == 0) {
                C::func(val);
                new_val /= 5;
            }
            
            void check(int); //Do not delete this line.
     }
     
void D::check(int new_val) {
    update_val(new_val);
      cout<<"Value = "<<val<<endl<<"A's func called "<<callA<<" times "<<endl<<"B's func called "<<callB<<" times "<<endl<<"C's func called "<<callC<<" times"<<endl;
}

int main() {
   D d;
   int new_val;
   cin>>new_val;
   d.check(new_val);

}
 
     
     
